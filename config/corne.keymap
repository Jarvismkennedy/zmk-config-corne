/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
	behaviors {
		//
		// HOMEY_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
		// for the pinky, ring, and middle fingers (which are assigned to Super,
		// Alt, and Ctrl respectively in the Miryoku system) on home row keys.
		//
		#define HOMEY_HOLDING_TYPE "tap-preferred"
		//
		// HOMEY_HOLDING_TIME defines how long you need to hold (milliseconds)
		// home row mod keys in order to send their modifiers to the computer
		// (i.e. "register" them) for mod-click mouse usage (e.g. Ctrl-Click).
		//
		#define HOMEY_HOLDING_TIME 270 // TAPPING_TERM + ALLOW_CROSSOVER_AFTER
		//
		// HOMEY_STREAK_DECAY defines how long you need to wait (milliseconds)
		// after typing before you can use home row mods again.  It prevents
		// unintended activation of home row mods when you're actively typing.
		//
		#define HOMEY_STREAK_DECAY 170 // global-quick-tap-ms
		//
		// HOMEY_REPEAT_DECAY defines how much time you have left (milliseconds)
		// after tapping a key to hold it again in order to make it auto-repeat.
		//
		#define HOMEY_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
	    //
		// SHIFT_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
		// for index fingers (which Miryoku assigns to Shift) on home row keys.
		//
		// NOTE: The "tap-preferred" flavor of ZMK hold-tap for index finger keys
		// allows faster activation of the Shift modifier (without having to wait
		// for the modified key to be released as the "balanced" flavor requires).
		// Typing streaks and the `hold-trigger-on-release` setting are disabled
		// for the index fingers so as not to hinder their speed and dexterity.
		//
		#define SHIFT_HOLDING_TYPE "tap-preferred"
	    //
		// SHIFT_HOLDING_TIME defines how long you need to hold (milliseconds)
		// index finger keys in order to send their modifiers to the computer
		// (i.e. "register" them) for mod-click mouse usage (e.g. Shift-Click).
		//
		// CAUTION: You'll need to perform inward rolls from pinky->ring->middle
		// fingers toward the index fingers when activating multiple modifiers
		// because `hold-trigger-on-release` is disabled for the index fingers.
		// Otherwise, you may be surprised that the index fingers' modifier is
		// sent immediately without the rest of your multi-mod chord when you
		// perform outward rolls from your index fingers toward your pinkies.
		//
		#define SHIFT_HOLDING_TIME 170
		//
		// SHIFT_STREAK_DECAY defines how long you need to wait (milliseconds)
		// after typing before you can use home row mods again.  It prevents
		// unintended activation of home row mods when you're actively typing.
		//
		#define SHIFT_STREAK_DECAY 70 // global-quick-tap-ms
		//
		// SHIFT_REPEAT_DECAY defines how much time you have left (milliseconds)
		// after tapping a key to hold it again in order to make it auto-repeat.
		//
		#define SHIFT_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
		//
		// THUMB_HOLDING_TYPE defines the flavor of ZMK hold-tap behavior to use
		// for the thumbs (which are assigned to 6 layers in the Miryoku system).
		//
		// NOTE: The "balanced" flavor of ZMK hold-tap provides instant modifier
		// activation for the symbol layer (if the tapped symbol key is released
		// while the thumb layer key is still held down) for quicker programming.
		//
		#define THUMB_HOLDING_TYPE "balanced"
		//
		// THUMB_HOLDING_TIME defines how long you need to hold (milliseconds)
		// a thumb key to activate a layer.  Shorter holds are treated as taps.
		//
		#define THUMB_HOLDING_TIME 200
		//
		// THUMB_REPEAT_DECAY defines how much time you have left (milliseconds)
		// after tapping a key to hold it again in order to make it auto-repeat.
		//
		#define THUMB_REPEAT_DECAY 300 // "tap then hold" for key auto-repeat
		//
		// SPACE_HOLDING_TIME defines how long you need to hold (milliseconds)
		// the space thumb key to activate.  Shorter holds are treated as taps.
		//
		#define SPACE_HOLDING_TIME 170
		//
		// SPACE_REPEAT_DECAY defines how much time you have left (milliseconds)
		// after tapping a key to hold it again in order to make it auto-repeat.
		//
		#define SPACE_REPEAT_DECAY 200 // "tap then hold" for key auto-repeat

		#define LEFT_HAND_KEYS      \
				  0  1  2  3  4     \
				 10 11 12 13 14     \
				 20 21 22 23 24     \

		#define RIGHT_HAND_KEYS     \
											   5  6  7  8  9 \
										   	  15 16 17 18 19 \
											  25 26 27 28 29 \

		#define THUMB_KEYS          \
							30 31 32    33 34 35 \


		// layers
		#define alph 0
		#define sym 1
		#define num 2
		#define nav 3
		#define func 4
		#define bt 5
		//
		// Home row mod-tap keys for all except index fingers
		//
		hl: miryoku_home_row_mods_left_hand {
			compatible = "zmk,behavior-hold-tap";
			label = "HOME_ROW_MODS_LEFT_HAND";
			flavor = HOMEY_HOLDING_TYPE;
			hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
			hold-trigger-on-release; // wait for other home row mods
			tapping-term-ms = <HOMEY_HOLDING_TIME>;
			quick-tap-ms = <HOMEY_REPEAT_DECAY>;
			require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
			#binding-cells = <2>;
			bindings = <&kp>, <&kp>;
		};
		hr: miryoku_home_row_mods_right_hand {
			compatible = "zmk,behavior-hold-tap";
			label = "HOME_ROW_MODS_RIGHT_HAND";
			flavor = HOMEY_HOLDING_TYPE;
			hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
			hold-trigger-on-release; // wait for other home row mods
			tapping-term-ms = <HOMEY_HOLDING_TIME>;
			quick-tap-ms = <HOMEY_REPEAT_DECAY>;
			require-prior-idle-ms = <HOMEY_STREAK_DECAY>;
			#binding-cells = <2>;
			bindings = <&kp>, <&kp>;
		};
		//
		// Special home row mod-tap keys for the index fingers
		//
		sl: miryoku_home_row_mods_left_shift_shift {
			compatible = "zmk,behavior-hold-tap";
			label = "HOME_ROW_MODS_LEFT_SHIFT_SHIFT";
			flavor = SHIFT_HOLDING_TYPE;
			hold-trigger-key-positions = <RIGHT_HAND_KEYS THUMB_KEYS>;
			//hold-trigger-on-release; // don't wait for other mods
			tapping-term-ms = <SHIFT_HOLDING_TIME>;
			quick-tap-ms = <SHIFT_REPEAT_DECAY>;
			require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
			#binding-cells = <2>;
			bindings = <&kp>, <&kp>;
		};
		sr: miryoku_home_row_mods_right_shift_shift {
			compatible = "zmk,behavior-hold-tap";
			label = "HOME_ROW_MODS_RIGHT_SHIFT_SHIFT";
			flavor = SHIFT_HOLDING_TYPE;
			hold-trigger-key-positions = <LEFT_HAND_KEYS THUMB_KEYS>;
			//hold-trigger-on-release; // don't wait for other mods
			tapping-term-ms = <SHIFT_HOLDING_TIME>;
			quick-tap-ms = <SHIFT_REPEAT_DECAY>;
			require-prior-idle-ms = <SHIFT_STREAK_DECAY>;
			#binding-cells = <2>;
			bindings = <&kp>, <&kp>;
		};
		//
		// Thumb cluster hold-tap keys for Miryoku layers
		//
		t: miryoku_thumb_layer {
			compatible = "zmk,behavior-hold-tap";
			label = "MIRYOKU_THUMB_LAYER";
			flavor = THUMB_HOLDING_TYPE;
			tapping-term-ms = <THUMB_HOLDING_TIME>;
			quick-tap-ms = <THUMB_REPEAT_DECAY>; // enable repeat
			//global-quick-tap; // no typing streak
			//retro-tap; // don't allow slow (hold-like) taps
			#binding-cells = <2>;
			bindings = <&mo>, <&kp>;
		};
		s: miryoku_thumb_layer_spacebar {
			compatible = "zmk,behavior-hold-tap";
			label = "MIRYOKU_THUMB_LAYER_SPACEBAR";
			flavor = THUMB_HOLDING_TYPE;
			tapping-term-ms = <SPACE_HOLDING_TIME>;
			quick-tap-ms = <SPACE_REPEAT_DECAY>; // enable repeat
			//global-quick-tap; // no typing streak
			retro-tap; // allow slow (hold-like) taps
			#binding-cells = <2>;
			bindings = <&mo>, <&kp>;
		};
	};
        keymap {
                compatible = "zmk,keymap";

                alph_layer {
						// -----------------------------------------------------------------------------------------
						// | none |  Q   |  W   |  F   |  P   |  B  |     |  J  |  L   |  U  |  Y  |  ;  | none |
						// | none |  G/A |  A/R |  C/S |  S/T |  G  |     |  M  |  S/N | C/E | A/I | G/O | none |
						// | none |  Z   |  X   |  C   |  D   |  V  |     |  K  |  H   |  ,  |  .  |  /  | none |
						//                      |BT/ESC|NAV/SP|?/TAB|     |ENT  |SYM/BK| NUM |
                        bindings = <
   &none   &kp Q       &kp W       &kp F       &kp P        &kp B       	  &kp J     &kp L       &kp U       &kp Y      &kp SEMI   &none
   &none   &hl LGUI A  &hl LALT R  &hl LCTRL S &sl LSHFT T  &kp G       	  &kp M     &sr RSHFT N &hr RCTRL E &hr RALT I &hr RGUI O &none
   &none   &kp Z       &kp X       &kp C       &kp D        &kp V       	  &kp K     &kp H       &kp COMMA   &kp DOT    &kp FSLH   &none
                                   &kp ESC     &t nav SPACE &t func TAB 	  &t bt RET &t sym BSPC &mo num
                        >;
                };
                sym_layer {
						// -----------------------------------------------------------------------------------------
						// | none |  `  |  &  |  *  |  (  |  (  |     |  )  |  <  |  =  |  >  |  '  | none |
						// | none |  ~  |  $  |  %  |  ^  |  [  |     |  ]  |  _  |  -  | none|  \  | none |
						// | none |none |  !  |  @  |  #  |  {  |     |  }  |  +  |  ,  |  .  |  |  | none |
						//                    |trans|backsp|trans|    |trans|trans| trans |
                        bindings = <
   &none   &kp GRAVE   &kp AMPS  &kp STAR   &kp LPAR   &kp LPAR         &kp RPAR  &kp LT    &kp EQUAL  &kp GT  &kp SQT  &none
   &none   &kp TILDE   &kp DLLR  &kp PRCNT  &kp CARET  &kp LBKT         &kp RBKT  &kp UNDER &kp MINUS  &none   &kp BSLH &none
   &none   &none       &kp EXCL  &kp AT     &kp HASH   &kp LBRC         &kp RBRC  &kp PLUS  &kp COMMA  &kp DOT &kp PIPE &none
                                 &trans     &kp BSPC   &trans           &trans    &trans    &trans
                        >;
                };
                num_layer {
						// -----------------------------------------------------------------------------------------
						// | none | none|  7  |  8  |  9  |  (  |     |  )  |  <  |  =  |  >  | none| none |
						// | none | none|  4  |  5  |  6  |  [  |     |  ]  |  _  |  -  | none| none| none |
						// | none | none|  1  |  2  |  3  |  {  |     |  }  |  +  |  ,  |  .  | none| none |
						//                    |trans|  0  |trans|     |trans|trans| trans |
                        bindings = <
   &none   &none   &kp N7  &kp N8  &kp N9   &kp LPAR         &kp RPAR  &kp LT    &kp EQUAL  &kp GT  &none &none
   &none   &none   &kp N4  &kp N5  &kp N6   &kp LBKT         &kp RBKT  &kp UNDER &kp MINUS  &none   &none &none
   &none   &none   &kp N1  &kp N2  &kp N3   &kp LBRC         &kp RBRC  &kp PLUS  &kp COMMA  &kp DOT &none &none
                           &trans  &kp N0   &trans           &trans    &trans    &trans
                        >;
                };
                nav_layer {
						// -----------------------------------------------------------------------------------------
						// | none | none | none | none  | none  | none  |     | none  | none  | none  | none  | none | none |
						// | none | none | none | CTRL  | none  | none  |     |   H   |  J    |   K   |   L   | none | none |
						// | none | none | none | none  | none  | none  |     | LEFT  | DOWN  |  UP   | RIGHT | none | none |
						//                      | trans | trans | trans |     | trans | trans | trans |
                        bindings = <
   &none   &none  &none  &none     &none  &none 		 &none     &none     &none   &none      &none  &none
   &none   &none  &none  &kp LCTRL &none  &none 		 &kp H     &kp J     &kp K   &kp L      &none  &none
   &none   &none  &none  &none     &none  &none 		 &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &none  &none
                  		 &trans    &trans &trans 		 &trans    &trans    &trans
                        >;
                };
                func_layer {
                        bindings = <
   &none   &none  &none  &none   &none  &none 		 &none     &kp F7    &kp F8  &kp F9  &none  &none
   &none   &none  &none  &none   &none  &none 		 &none     &kp F4    &kp F5  &kp F6  &none  &none
   &none   &none  &none  &none   &none  &none 		 &none     &kp F1    &kp F2  &kp F3  &none  &none
                  		 &trans  &trans &trans 		 &trans    &trans    &trans
                        >;
                };
        };
};
